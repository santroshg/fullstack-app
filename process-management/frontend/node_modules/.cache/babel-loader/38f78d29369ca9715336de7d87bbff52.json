{"ast":null,"code":"// Set the session in the local storage\nexport var setSession = function setSession(token, expiry) {\n  localStorage.setItem('token', token);\n  localStorage.setItem('expiry', expiry);\n}; // Clear the session from the local storage\n\nexport var clearSession = function clearSession() {\n  localStorage.removeItem('token');\n  localStorage.removeItem('expiry');\n}; // Checks if the session is valid (locally) according to the expiration time\n\nexport var isSessionValid = function isSessionValid() {\n  var expiry = localStorage.getItem('expiry');\n\n  if (expiry) {\n    return +new Date(expiry) > +new Date();\n  }\n\n  return false;\n}; // Creates the authorization header using the bearer token\n\nexport var getAuthHeaders = function getAuthHeaders() {\n  return {\n    Authorization: \"Bearer \".concat(localStorage.getItem('token'))\n  };\n};","map":{"version":3,"sources":["/Users/sanganth/projects/nodejs/team-2-program-management-application/process-management/frontend/src/session.ts"],"names":["setSession","token","expiry","localStorage","setItem","clearSession","removeItem","isSessionValid","getItem","Date","getAuthHeaders","Authorization"],"mappings":"AAAA;AACA,OAAO,IAAMA,UAAU,GAAG,SAAbA,UAAa,CAACC,KAAD,EAAgBC,MAAhB,EAAyC;AACjEC,EAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BH,KAA9B;AACAE,EAAAA,YAAY,CAACC,OAAb,CAAqB,QAArB,EAA+BF,MAA/B;AACD,CAHM,C,CAKP;;AACA,OAAO,IAAMG,YAAY,GAAG,SAAfA,YAAe,GAAY;AACtCF,EAAAA,YAAY,CAACG,UAAb,CAAwB,OAAxB;AACAH,EAAAA,YAAY,CAACG,UAAb,CAAwB,QAAxB;AACD,CAHM,C,CAKP;;AACA,OAAO,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,GAAe;AAC3C,MAAML,MAAM,GAAGC,YAAY,CAACK,OAAb,CAAqB,QAArB,CAAf;;AACA,MAAIN,MAAJ,EAAY;AACV,WAAO,CAAC,IAAIO,IAAJ,CAASP,MAAT,CAAD,GAAoB,CAAC,IAAIO,IAAJ,EAA5B;AACD;;AACD,SAAO,KAAP;AACD,CANM,C,CAQP;;AACA,OAAO,IAAMC,cAAc,GAAG,SAAjBA,cAAiB;AAAA,SAAO;AACnCC,IAAAA,aAAa,mBAAYR,YAAY,CAACK,OAAb,CAAqB,OAArB,CAAZ;AADsB,GAAP;AAAA,CAAvB","sourcesContent":["// Set the session in the local storage\nexport const setSession = (token: string, expiry: string): void => {\n  localStorage.setItem('token', token);\n  localStorage.setItem('expiry', expiry);\n};\n\n// Clear the session from the local storage\nexport const clearSession = (): void => {\n  localStorage.removeItem('token');\n  localStorage.removeItem('expiry');\n};\n\n// Checks if the session is valid (locally) according to the expiration time\nexport const isSessionValid = (): boolean => {\n  const expiry = localStorage.getItem('expiry');\n  if (expiry) {\n    return +new Date(expiry) > +new Date();\n  }\n  return false;\n};\n\n// Creates the authorization header using the bearer token\nexport const getAuthHeaders = () => ({\n  Authorization: `Bearer ${localStorage.getItem('token')}`\n});\n"]},"metadata":{},"sourceType":"module"}