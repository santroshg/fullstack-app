{"version":3,"sources":["logo.svg","session.ts","App.tsx","serviceWorker.js","index.tsx"],"names":["module","exports","__webpack_require__","p","setSession","token","expiry","localStorage","setItem","clearSession","removeItem","isSessionValid","getItem","Date","getAuthHeaders","Authorization","concat","App","state","email","password","isRequesting","isLoggedIn","data","error","handleLogin","_callee","_this$state","response","_response$data","regenerator_default","a","wrap","_context","prev","next","_this","setState","axios","post","sent","session","t0","finish","stop","this","logout","getTestData","_callee2","_context2","get","headers","_this2","react","className","src","logo","alt","map","item","index","key","name","value","disabled","onClick","placeholder","type","onChange","e","target","React","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.be363888.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// Set the session in the local storage\nexport const setSession = (token: string, expiry: string): void => {\n  localStorage.setItem('token', token);\n  localStorage.setItem('expiry', expiry);\n};\n\n// Clear the session from the local storage\nexport const clearSession = (): void => {\n  localStorage.removeItem('token');\n  localStorage.removeItem('expiry');\n};\n\n// Checks if the session is valid (locally) according to the expiration time\nexport const isSessionValid = (): boolean => {\n  const expiry = localStorage.getItem('expiry');\n  if (expiry) {\n    return +new Date(expiry) > +new Date();\n  }\n  return false;\n};\n\n// Creates the authorization header using the bearer token\nexport const getAuthHeaders = () => ({\n  Authorization: `Bearer ${localStorage.getItem('token')}`\n});\n","import axios from \"axios\";\nimport * as React from 'react';\nimport './App.css';\nimport * as session from './session';\nimport logo from './logo.svg';\n\nexport interface AppState {\n  email: string;\n  password: string;\n  isRequesting: boolean;\n  isLoggedIn: boolean;\n  data: App.Item[];\n  error: string;\n}\n\nclass App extends React.Component<{}, AppState> {\n  public state = {\n    email: \"\",\n    password: \"\",\n    isRequesting: false,\n    isLoggedIn: false,\n    data: [],\n    error: \"\"\n  };\n\n  public componentDidMount() {\n    this.setState({ isLoggedIn: session.isSessionValid() });\n  }\n\n  public render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <h1 className=\"App-title\">Welcome to React</h1>\n        </header>\n        <div className=\"App-error\">{this.state.error}</div>\n        {this.state.isLoggedIn ? (\n          <div className=\"App-private\">\n            <div>\n              Server test data:\n              <ul>\n                {this.state.data.map((item: App.Item, index) => <li key={index}>name: {item.name} / value: {item.value}</li>)}\n              </ul>\n            </div>\n            <button disabled={this.state.isRequesting} onClick={this.getTestData}>Get test data</button>\n            <button disabled={this.state.isRequesting} onClick={this.logout}>Log out</button>\n          </div>\n        ) : (\n          <div className=\"App-login\">\n            (try the credentials: testuser@email.com / my-password)\n            <input\n              disabled={this.state.isRequesting}\n              placeholder=\"email\"\n              type=\"text\"\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => this.setState({ email: e.target.value })}\n            />\n            <input\n              disabled={this.state.isRequesting}\n              placeholder=\"password\"\n              type=\"password\"\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => this.setState({ password: e.target.value })}\n            />\n            <button disabled={this.state.isRequesting} onClick={this.handleLogin}>Log in</button>\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  private handleLogin = async (): Promise<void> => {\n    const { email, password } = this.state;\n    try {\n      this.setState({ error: \"\" });\n      this.setState({ isRequesting: true });\n      const response = await axios.post<{ token: string; expiry: string }>(\"/api/users/login\", { email, password });\n      const { token, expiry } = response.data;\n      session.setSession(token, expiry);\n      this.setState({ isLoggedIn: true });\n    } catch (error) {\n      this.setState({ error: \"Something went wrong\" });\n    } finally {\n      this.setState({ isRequesting: false });\n    }\n  };\n\n  private logout = (): void => {\n    session.clearSession();\n    this.setState({ isLoggedIn: false });\n  };\n\n  private getTestData = async (): Promise<void> => {\n    try {\n      this.setState({ error: \"\" });\n      const response = await axios.get<App.Item[]>(\"/api/items\", { headers: session.getAuthHeaders() });\n      this.setState({ data: response.data });\n    } catch (error) {\n      this.setState({ error: \"Something went wrong\" });\n    } finally {\n      this.setState({ isRequesting: false });\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root') as HTMLElement\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}